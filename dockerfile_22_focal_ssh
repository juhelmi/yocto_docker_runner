# https://www.ezurio.com/resources/software-announcements/using-docker-containers-for-reproducible-yocto-builds
# https://forums.docker.com/t/unabel-to-do-ssh-from-one-container-to-another-container-as-non-root-user/61060
# 
# Docker Ubuntu Focal image to build Yocto 
#

FROM ubuntu:22.04

# Read only filesystem set and changes to etc are blocked?
# RUN hostnamectl set-hostname yocto-worker
#RUN echo yocto-machine > /etc/hostname
#RUN chmod +w /etc/hosts
#RUN echo 127.0.1.1	yocto-machine >> /etc/hosts
#RUN chmod -w /etc/hosts


ENV DEBIAN_FRONTEND=noninteractive

# Keep the dependency list as short as reasonable
RUN apt-get update && \
    apt-get install -y bc bison bsdmainutils build-essential cmake curl dosfstools locales \
        flex g++-multilib gcc-multilib git gnupg gperf lib32ncurses5-dev \
        lib32z1-dev libncurses5-dev git-lfs \
        libsdl1.2-dev libxkbcommon-x11-0 libwayland-cursor0 libxml2-utils lzop \
        openjdk-8-jdk lzop wget git-core unzip \
        genisoimage sudo socat xterm gawk cpio texinfo \
        gettext vim diffstat chrpath rsync lz4 zstd \
        python-mako python-is-python3 libusb-1.0-0-dev exuberant-ctags \
        pngcrush schedtool xsltproc zip zlib1g-dev libswitch-perl 
# packages suggested in https://developer.technexion.com/docs/introduction-to-yocto-customization#build-the-image-for-the-scorpion-machine
RUN apt-get update && \
    apt-get install -y gawk wget git git-core diffstat unzip texinfo gcc-multilib build-essential \
    chrpath socat cpio python python3 python3-pip python3-pexpect \
    python3-git python3-jinja2 libegl1-mesa pylint3 rsync bc bison \
    xz-utils debianutils iputils-ping libsdl1.2-dev xterm \
    language-pack-en coreutils texi2html file docbook-utils \
    python-pysqlite2 help2man desktop-file-utils \
    libgl1-mesa-dev libglu1-mesa-dev mercurial autoconf automake \
    groff curl lzop asciidoc u-boot-tools libreoffice-writer \
    sshpass ssh-askpass zip xz-utils kpartx vim screen
RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ADD https://commondatastorage.googleapis.com/git-repo-downloads/repo /usr/local/bin/
RUN chmod 755 /usr/local/bin/*

# Yocto setting for host
#python3-pip not available
RUN apt-get update && \
    apt-get install -y git git-lfs tar python3 python3-minimal python3-distutils gcc
RUN apt-get install -y gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio 
RUN apt-get update && \
    apt-get install -y python3 xz-utils debianutils libegl1-mesa libsdl1.2-dev xterm mesa-common-dev zstd libglx-dev libgl-dev
RUN apt-get install -y gcc-multilib build-essential chrpath socat libsdl1.2-dev xterm sed cvs subversion coreutils texi2html docbook-utils python-pysqlite2 help2man desktop-file-utils libgl1-mesa-dev libglu1-mesa-dev mercurial autoconf automake groff curl lzop asciidoc u-boot-tools cpio sudo rsync locales
RUN apt-get install -y python3-pexpect python3-git xz-utils debianutils iputils-ping zstd liblz4-tool
RUN apt-get install -y make cmake
# linux-headers-$(uname -r) 
#RUN apt-get update && \
#    apt-get install -y linux-headers-$(uname -r) 
#    apt-get install -y linux-headers-6.5.0-27-generic

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# ===== create user/setup environment =====
# Replace 1000 with your user/group id
RUN export uid=1000 gid=1000 user=juha && \
    mkdir -p /home/${user} && \
    echo "${user}:x:${uid}:${gid}:${user},,,:/home/${user}:/bin/bash" >> /etc/passwd && \
    echo "${user}:x:${gid}:" >> /etc/group && \
    echo "${user} ALL=(ALL:ALL) NOPASSWD:ALL " >> /etc/sudoers && \
    chmod 0440 /etc/sudoers && \
    echo "${user} ALL=(ALL) NOPASSWD:ALL " >> /etc/sudoers.d/${user} && \
    chmod 0440 /etc/sudoers.d/${user} && \
    echo "${user}::19769:0:99999:7:::" >> /etc/shadow && \
chown ${uid}:${gid} -R /home/${user}
#    echo "${user} ALL=(ALL) NOPASSWD:ALL " >> /etc/sudoers.d/${user} && \
#    chmod 0440 /etc/sudoers.d/${user} && \

RUN git config --global color.ui false

# Improve rebuild performance by enabling compiler cache
ENV USE_CCACHE 1
ENV CCACHE_DIR /home/juha/.ccache

# some QT-Apps/Gazebo do not show controls without this
ENV QT_X11_NO_MITSHM 1

# 
RUN mkdir -p /home/juha/work/yocto

# RUN addgroup -S juha && adduser -S -D juha -G juha 

# Install SSH server
RUN apt-get update && \
    apt-get install -y openssh-server && \
    apt-get clean
# RUN ssh-keygen -A

# Set the root password for the SSH server (CHANGE THIS PASSWORD!)
RUN echo 'root:ubuntu' | chpasswd
RUN echo 'juha:juha' | chpasswd

# Permit root login via SSH
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# Enable password authentication
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key

# SSH port (optional, change if needed)
EXPOSE 22

# Tools for ssh terminal. These not yet solve ssh xterm font size setting
RUN apt-get update && \
    apt-get install -y tree console-setup dialog tasksel screen libncurses5-dev libncursesw5-dev font-manager fontconfig
#    console-setup-mini

# Set the locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
 
ENV HOME /home/juha
ENV USER juha
USER juha
RUN ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519

# RUN /usr/bin/ssh-keygen -A 

USER root

RUN mkdir /run/sshd
RUN sudo chmod 755 /run/sshd

# Start SSH service
#CMD ["/usr/sbin/sshd", "-D"]
CMD ["sudo", "/usr/sbin/sshd", "-D"]
# CMD ["/bin/sh"]